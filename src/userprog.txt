                                                            CS39002
                                                    PROJECT 2 : USER PROGRAMS
                                                        DESIGN DOCUMENT

------- GROUP --------
1.    KARTIK SAINI          17CS10018   SAINIKARTIKCT25@GMAIL.COM 
2.    VIVEK VARDHAN ADEPU   17CS10002   VIVEKVICKY839@GMAIL.COM

------- PRELIMINARIES ---------
>> PARDON ME FOR WRITING EVERYTHING IN CAPITALS. I HAD NO TIME

>> CONSULTED STACKOVERFLOW FOR CLARIFICATIONS



                                                        ARGUMENT PASSING
                                                        ================

---- DATA STRUCTURES ----

>> A1:  STRUCT PROG ARGS        :   TO STORE NO OF ARGS AND ARGS IN AN ARRAY[AFTER PARSING THE ENTIRE COMMAND]
        PID_T PID               :   FOR PROCEES IDENTIFICATION
        #DEFINE USERPROG        :   AS SOME OF THE INCLUDES,VARIABLES FROM OTHER FILES NEEDED IT[FOR ARG PASSING AND SYSCALLS]
        
---- ALGORITHMS ----

>> A2: IMPLEMENTED CMD PARSING FUNCTION WHICH PARSED FULL CMD INTO FILENAME AND ARGUMENTS AND USED IN PROCESS_EXECUTE
AdjustED start_process() and load() to make them match function parameters with given arguments. This should not violate calling convention, so they must push arguments right to left. When pushing arguments is done, load() should push return address where callee process returns. Stack pointer should point this return address.

---- RATIONALE ----

>> A3: AS STRTOK_R IS THREAD SAFE AND COULD SAVE LEFTOVERS IN GIVEN POINTER

>> A4: 1. SECURITY




                                                        SYSTEM CALLS
                                                        ============

---- DATA STRUCTURES ----

>> B1:  #INCLUDES               : AS SOME FUNCTIONS NEEDED THEM
        #DEFINE MAX_NUM_FILES   : AS MALLOC IS NOT WORKING [IN PINTOS DOC], NEEDED TO INITIALIZE THE FILE_POINTERS' 
                                  ARRAY[INDEXED BY FDs]
        INT NO_OF_OPENED_FILES  : AS THE NAME SIGNIFIES. TO GET THE NEXT FD

>> B2: I'VE MADE AN ARRAY INDEXED BY FDs[EACH TIME A NEW FILE COMES FD IS INCREASED BY 1] AND ARE UNIQUE W.R.T PROCESS

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?


>> B5: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.


---- RATIONALE ----

>> B6: AS MENTIONED IN THE DOC, IT IS FASTER BECAUSE IT TAKES ADVANTAGE OF MMU

>> B7: DISADVs: MEMORY ISSUE, AS IT ALLOCATED FOR FIXED NO OF POINTERS[MIGHT HAVE USED LIST,
                BUT, REFRAINED FROM IT BECAUSE OF BELOW ADVANTAGE AND NO OF FILESS ARE ANYWAY LIMITED IN FILESYS]
       ADVs   : FETCHING IS FASTER